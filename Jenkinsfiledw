pipeline{
    
    //agent any
agent{
label "fbnode"
}

parameters {
  choice choices: ['development', 'master', 'qa'], description: 'Select BranchName', name: 'BranchName'
}

tools{
    maven "maven3.8.5"
}

triggers {
  //pollSCM('* * * * *')
   cron('* * * * *')
}

options {
  timestamps()
  buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')
}

stages{
    
    //Get the code from GitHub
    stage('CheckOutCode'){
    steps{
        slacknotifications("STARTED")
        git branch: "${params.BranchName}", credentialsId: '1ebfc92e-639d-4b4e-b7d0-1435fb0ccd25', url: 'https://github.com/swsepbatch-2022/maven-web-application.git'
    }
    }
    
    //Do the Build
    stage('Build'){
    steps{
        sh "mvn clean package"
    }
    }
    
    //Exicute SonarQube Report
    stage('ExicuteSonarQubeReport'){
    steps{
        sh "mvn sonar:sonar"
    }
    }
    
    //Upload Artifacts into Nexus repo
    stage('UploadArtifactsIntoNexus'){
    steps{
        sh "mvn deploy"
    }
    }
    
    //Deploy Application into the Tomcat Server
    stage('DeployAppIntoTomcat'){
    steps{
        sshagent(['f960f792-0782-4551-854a-ddcd88bd10e5']) {
sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@172.31.35.175:/opt/apache-tomcat-9.0.65/webapps/"
}
    }
    }
    
    
}//stages closing 

post {
  success {
    slacknotifications(currentBuild.result)
  }
  failure {
    slacknotifications(currentBuild.result)
  }
}


}//pipeline closing

def slacknotifications(String buildStatus = 'STARTED') {

buildStatus =  buildStatus ?: 'SUCCESS'

// Default values
def colorName = 'RED'
def colorCode = '#FF0000'
def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
def summary = "${subject} (${env.BUILD_URL})"

//Override default values based on build status
if (buildStatus == 'STARTED') {
color = 'ORANGE'
colorCode = '#FFA500'
} else if (buildStatus == 'SUCCESS') {
color = 'GREEN'
colorCode = '#00FF00'
} else {
color = 'RED'
colorCode = '#FF0000'
}

// Send notifications
slackSend (color: colorCode, message: summary)
}

